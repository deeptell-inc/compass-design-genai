name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY_FRONTEND: compass-design-genai-frontend
  ECR_REPOSITORY_BACKEND: compass-design-genai-backend
  ECS_SERVICE_FRONTEND: compass-design-genai-frontend-service
  ECS_SERVICE_BACKEND: compass-design-genai-backend-service
  ECS_CLUSTER: compass-design-genai-cluster

jobs:
  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: compass-design-bridge/package-lock.json

      - name: Install dependencies
        run: |
          cd compass-design-bridge
          npm ci

      - name: Run linter
        run: |
          cd compass-design-bridge
          npm run lint

      - name: Run tests
        run: |
          cd compass-design-bridge
          npm run test:run
        env:
          CI: true

      - name: Build frontend
        run: |
          cd compass-design-bridge
          npm run build

  # Test Backend
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: compass-design-bridge-server/package-lock.json

      - name: Install dependencies
        run: |
          cd compass-design-bridge-server
          npm ci

      - name: Run linter
        run: |
          cd compass-design-bridge-server
          npm run lint

      - name: Run tests
        run: |
          cd compass-design-bridge-server
          npm test
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key

      - name: Build backend
        run: |
          cd compass-design-bridge-server
          npm run build

  # Deploy to AWS (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd compass-design-bridge
          
          # Build image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest .
          
          # Push image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

      - name: Build and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd compass-design-bridge-server
          
          # Build image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
          
          # Push image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

      - name: Deploy to ECS
        run: |
          # Force new deployment for frontend service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_FRONTEND \
            --force-new-deployment
          
          # Force new deployment for backend service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_BACKEND \
            --force-new-deployment

      - name: Wait for deployment completion
        run: |
          echo "Waiting for frontend deployment to complete..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_FRONTEND
          
          echo "Waiting for backend deployment to complete..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_BACKEND
          
          echo "Deployment completed successfully!"

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
